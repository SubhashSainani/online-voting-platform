name: Voting Platform CI/CD (Self-Hosted)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NAMESPACE: voting-platform

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: 🔽 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 📦 Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 🔧 Check Prerequisites
      shell: cmd
      run: |
        echo "Checking prerequisites..."
        docker --version
        minikube version
        kubectl version --client

    - name: 🏗️ Build Maven Projects
      shell: cmd
      run: |
        echo "Building all Maven projects..."
        mvn clean compile -f service-discovery/pom.xml
        mvn clean compile -f api-gateway/pom.xml
        mvn clean compile -f user-service/pom.xml
        mvn clean compile -f voting-service/pom.xml

    - name: 🧪 Run Tests
      shell: cmd
      run: |
        echo "Running tests for all services..."
        mvn test -f service-discovery/pom.xml || echo "Service Discovery tests completed"
        mvn test -f api-gateway/pom.xml || echo "API Gateway tests completed"
        mvn test -f user-service/pom.xml || echo "User Service tests completed"
        mvn test -f voting-service/pom.xml || echo "Voting Service tests completed"

    - name: 🔧 Check Minikube Status
      shell: cmd
      run: |
        echo "Checking Minikube status..."
        minikube status || (echo "Starting Minikube..." && minikube start --driver=docker --memory=4096 --cpus=2)

    - name: 🔧 Enable Minikube Addons
      shell: cmd
      run: |
        echo "Enabling Minikube addons..."
        minikube addons enable ingress
        minikube addons enable metrics-server
        echo "Addons enabled successfully"

    - name: 🛠️ Configure Docker Environment
      shell: cmd
      run: |
        echo "Configuring Docker to use Minikube's Docker daemon..."
        FOR /f "tokens=*" %%i IN ('minikube docker-env --shell cmd') DO %%i
        echo "Docker environment configured for Minikube"

    - name: 🏗️ Build Docker Images
      shell: cmd
      run: |
        echo "Setting up Minikube Docker environment..."
        FOR /f "tokens=*" %%i IN ('minikube docker-env --shell cmd') DO %%i
        
        echo "Building Docker images..."
        
        echo "🔧 Building Service Discovery..."
        docker build --no-cache -t 2017445/service-discovery:latest ./service-discovery
        
        echo "🚪 Building API Gateway..."
        docker build --no-cache -t 2017445/api-gateway:latest ./api-gateway
        
        echo "👤 Building User Service..."
        docker build --no-cache -t 2017445/user-service:latest ./user-service
        
        echo "🗳️ Building Voting Service..."
        docker build --no-cache -t 2017445/voting-service:latest ./voting-service
        
        echo "✅ All images built successfully!"
        docker images | findstr 2017445

    - name: 🎯 Create Kubernetes Namespace
      shell: cmd
      run: |
        kubectl create namespace voting-platform --dry-run=client -o yaml | kubectl apply -f -

    - name: 🔐 Apply Secrets
      shell: cmd
      run: |
        echo "Applying Kubernetes secrets..."
        kubectl apply -f k8s/secrets/ -n voting-platform

    - name: 💾 Apply Persistent Storage
      shell: cmd
      run: |
        echo "Setting up persistent storage..."
        kubectl apply -f k8s/persistence/ -n voting-platform

    - name: ⚙️ Apply ConfigMaps
      shell: cmd
      run: |
        echo "Applying configuration maps..."
        kubectl apply -f k8s/configmaps/ -n voting-platform

    - name: 🔗 Apply Services
      shell: cmd
      run: |
        echo "Creating Kubernetes services..."
        kubectl apply -f k8s/services/ -n voting-platform

    - name: 📊 Deploy Database
      shell: cmd
      run: |
        echo "Deploying MySQL database..."
        kubectl apply -f k8s/deployments/mysql-deployment.yaml -n voting-platform
        echo "Waiting for MySQL to be ready..."
        kubectl wait --for=condition=ready pod -l app=mysql -n voting-platform --timeout=300s

    - name: 🔍 Deploy Service Discovery
      shell: cmd
      run: |
        echo "Deploying Eureka Service Discovery..."
        kubectl apply -f k8s/deployments/service-discovery-deployment.yaml -n voting-platform
        echo "Waiting for Service Discovery to be ready..."
        kubectl wait --for=condition=ready pod -l app=service-discovery -n voting-platform --timeout=300s

    - name: 🚀 Deploy Microservices
      shell: cmd
      run: |
        echo "Deploying User Service..."
        kubectl apply -f k8s/deployments/user-service-deployment.yaml -n voting-platform
        
        echo "Deploying Voting Service..."
        kubectl apply -f k8s/deployments/voting-service-deployment.yaml -n voting-platform
        
        echo "Deploying API Gateway..."
        kubectl apply -f k8s/deployments/api-gateway-deployment.yaml -n voting-platform

    - name: ⏳ Wait for Deployments
      shell: cmd
      run: |
        echo "Waiting for all deployments to be ready..."
        kubectl wait --for=condition=available deployment/user-service -n voting-platform --timeout=300s
        kubectl wait --for=condition=available deployment/voting-service -n voting-platform --timeout=300s
        kubectl wait --for=condition=available deployment/api-gateway -n voting-platform --timeout=300s

    - name: 📈 Apply HPA (Horizontal Pod Autoscaler)
      shell: cmd
      run: |
        echo "Setting up auto-scaling..."
        kubectl apply -f k8s/hpa/ -n voting-platform

    - name: 🌐 Setup hosts file for voting.local
      shell: cmd
      run: |
        echo "Setting up voting.local domain..."
        echo 127.0.0.1 voting.local >> C:\Windows\System32\drivers\etc\hosts
        echo "voting.local added to hosts file"

    - name: 🚪 Apply Ingress
      shell: cmd
      run: |
        echo "Setting up Ingress..."
        kubectl apply -f k8s/ingress/ -n voting-platform

    - name: 🌐 Start Minikube Tunnel
      shell: cmd
      run: |
        echo "Starting Minikube tunnel..."
        start /B minikube tunnel
        timeout /t 15 /nobreak
        echo "Tunnel started in background"

    - name: 🔍 Deployment Verification
      shell: cmd
      run: |
        echo "🔍 Verifying deployment status..."
        echo.
        echo "📊 All Resources:"
        kubectl get all -n voting-platform
        
        echo.
        echo "🏠 Pods Status:"
        kubectl get pods -n voting-platform -o wide
        
        echo.
        echo "🔗 Services:"
        kubectl get services -n voting-platform
        
        echo.
        echo "🌍 Ingress:"
        kubectl get ingress -n voting-platform
        
        echo.
        echo "📈 HPA Status:"
        kubectl get hpa -n voting-platform

    - name: 🧪 Health Check Tests
      shell: cmd
      run: |
        echo "🧪 Running health checks..."
        
        echo "Waiting for services to fully start..."
        timeout /t 30 /nobreak
        
        echo "Testing voting.local accessibility..."
        curl -s -o nul -w "%%{http_code}" http://voting.local/login | findstr "200" && echo "✅ voting.local is accessible!" || echo "⚠️ voting.local might not be ready yet"
        
        echo "Checking pod readiness..."
        FOR /f %%i IN ('kubectl get pods -n voting-platform --no-headers ^| find /c "1/1"') DO SET READY_PODS=%%i
        FOR /f %%i IN ('kubectl get pods -n voting-platform --no-headers ^| find /c /v ""') DO SET TOTAL_PODS=%%i
        echo "Ready pods: %READY_PODS%/%TOTAL_PODS%"
        
        if "%READY_PODS%"=="%TOTAL_PODS%" (
          echo "✅ All pods are ready!"
        ) else (
          echo "⚠️ Some pods are not ready yet"
          kubectl get pods -n voting-platform
        )

    - name: 📋 Generate Deployment Report
      if: always()
      shell: cmd
      run: |
        echo "📋 DEPLOYMENT REPORT" > deployment-report.txt
        echo "===================" >> deployment-report.txt
        echo. >> deployment-report.txt
        echo "🕐 Deployment Time: %DATE% %TIME%" >> deployment-report.txt
        echo "🔧 Git Commit: ${{ github.sha }}" >> deployment-report.txt
        echo "🌿 Branch: ${{ github.ref_name }}" >> deployment-report.txt
        echo. >> deployment-report.txt
        echo "📊 Pod Status:" >> deployment-report.txt
        kubectl get pods -n voting-platform >> deployment-report.txt
        echo. >> deployment-report.txt
        echo "🔗 Services:" >> deployment-report.txt
        kubectl get services -n voting-platform >> deployment-report.txt
        echo. >> deployment-report.txt
        echo "🌍 Ingress:" >> deployment-report.txt
        kubectl get ingress -n voting-platform >> deployment-report.txt
        
        type deployment-report.txt

    - name: 🧹 Cleanup on Failure
      if: failure()
      shell: cmd
      run: |
        echo "🧹 Cleaning up failed deployment..."
        kubectl delete namespace voting-platform --ignore-not-found=true
        echo "Cleanup completed"

    - name: 🎉 Deployment Success
      if: success()
      shell: cmd
      run: |
        echo.
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "========================"
        echo.
        echo "✅ All services deployed successfully"
        echo "✅ Kubernetes cluster is ready"
        echo "✅ Application is accessible"
        echo.
        echo "🔗 Access the application:"
        echo "   - Local URL: http://voting.local/login"
        FOR /f %%i IN ('minikube ip') DO SET MINIKUBE_IP=%%i
        echo "   - Minikube IP: %MINIKUBE_IP%"
        echo "   - Run 'minikube tunnel' manually to access the application"
        echo.
        FOR /f %%i IN ('kubectl get pods -n voting-platform ^| find /c "Running"') DO SET RUNNING_PODS=%%i
        echo "📊 Running pods: %RUNNING_PODS%"
        echo.
        echo "🚀 Your voting platform is ready for use!"
        echo "🌐 Visit: http://voting.local/login"